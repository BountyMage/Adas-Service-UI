/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_ADAS__SYST_STATUS__SERVICE_HPP_
#define V1_COMMONAPI_ADAS__SYST_STATUS__SERVICE_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {

class ADAS_SystStatus_Service {
public:
    virtual ~ADAS_SystStatus_Service() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    
    struct ADCU_NOA_Status_Enum : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            OFF = 0,
            Passive = 1,
            Standby = 2,
            Active = 3,
            TakeOverRequest = 4,
            SafeStop = 5,
            TemporaryError = 6,
            PermanentError = 7
        };
    
        ADCU_NOA_Status_Enum()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::OFF)) {}
        ADCU_NOA_Status_Enum(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::OFF):
                case static_cast< uint8_t>(Literal::Passive):
                case static_cast< uint8_t>(Literal::Standby):
                case static_cast< uint8_t>(Literal::Active):
                case static_cast< uint8_t>(Literal::TakeOverRequest):
                case static_cast< uint8_t>(Literal::SafeStop):
                case static_cast< uint8_t>(Literal::TemporaryError):
                case static_cast< uint8_t>(Literal::PermanentError):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ADCU_NOA_Status_Enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ADCU_NOA_Status_Enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ADCU_NOA_Status_Enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ADCU_NOA_Status_Enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ADCU_NOA_Status_Enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ADCU_NOA_Status_Enum &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::OFF): return "OFF";
            case static_cast< uint8_t>(Literal::Passive): return "Passive";
            case static_cast< uint8_t>(Literal::Standby): return "Standby";
            case static_cast< uint8_t>(Literal::Active): return "Active";
            case static_cast< uint8_t>(Literal::TakeOverRequest): return "TakeOverRequest";
            case static_cast< uint8_t>(Literal::SafeStop): return "SafeStop";
            case static_cast< uint8_t>(Literal::TemporaryError): return "TemporaryError";
            case static_cast< uint8_t>(Literal::PermanentError): return "PermanentError";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct ADCU_LateralControlStatus_Enum : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            OFF = 0,
            Passive = 1,
            Standby = 2,
            Active = 3,
            TakeOverRequest = 4,
            SafeStop = 5,
            TemporaryError = 6,
            PermanentError = 7
        };
    
        ADCU_LateralControlStatus_Enum()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::OFF)) {}
        ADCU_LateralControlStatus_Enum(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::OFF):
                case static_cast< uint8_t>(Literal::Passive):
                case static_cast< uint8_t>(Literal::Standby):
                case static_cast< uint8_t>(Literal::Active):
                case static_cast< uint8_t>(Literal::TakeOverRequest):
                case static_cast< uint8_t>(Literal::SafeStop):
                case static_cast< uint8_t>(Literal::TemporaryError):
                case static_cast< uint8_t>(Literal::PermanentError):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ADCU_LateralControlStatus_Enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ADCU_LateralControlStatus_Enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ADCU_LateralControlStatus_Enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ADCU_LateralControlStatus_Enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ADCU_LateralControlStatus_Enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ADCU_LateralControlStatus_Enum &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::OFF): return "OFF";
            case static_cast< uint8_t>(Literal::Passive): return "Passive";
            case static_cast< uint8_t>(Literal::Standby): return "Standby";
            case static_cast< uint8_t>(Literal::Active): return "Active";
            case static_cast< uint8_t>(Literal::TakeOverRequest): return "TakeOverRequest";
            case static_cast< uint8_t>(Literal::SafeStop): return "SafeStop";
            case static_cast< uint8_t>(Literal::TemporaryError): return "TemporaryError";
            case static_cast< uint8_t>(Literal::PermanentError): return "PermanentError";
            default: return "UNDEFINED";
            }
        }
    };
    struct ADAS_SystStatus_Struct : CommonAPI::Struct< ADCU_NOA_Status_Enum, ADCU_LateralControlStatus_Enum> {
    
        ADAS_SystStatus_Struct()
        {
            std::get< 0>(values_) = ADCU_NOA_Status_Enum();
            std::get< 1>(values_) = ADCU_LateralControlStatus_Enum();
        }
        ADAS_SystStatus_Struct(const ADCU_NOA_Status_Enum &_ADCU_NOA_Status, const ADCU_LateralControlStatus_Enum &_ADCU_LateralControlStatus)
        {
            std::get< 0>(values_) = _ADCU_NOA_Status;
            std::get< 1>(values_) = _ADCU_LateralControlStatus;
        }
        inline const ADCU_NOA_Status_Enum &getADCU_NOA_Status() const { return std::get< 0>(values_); }
        inline void setADCU_NOA_Status(const ADCU_NOA_Status_Enum &_value) { std::get< 0>(values_) = _value; }
        inline const ADCU_LateralControlStatus_Enum &getADCU_LateralControlStatus() const { return std::get< 1>(values_); }
        inline void setADCU_LateralControlStatus(const ADCU_LateralControlStatus_Enum &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const ADAS_SystStatus_Struct& _other) const {
        return (getADCU_NOA_Status() == _other.getADCU_NOA_Status() && getADCU_LateralControlStatus() == _other.getADCU_LateralControlStatus());
        }
        inline bool operator!=(const ADAS_SystStatus_Struct &_other) const {
            return !((*this) == _other);
        }
    
    };
};

const char* ADAS_SystStatus_Service::getInterface() {
    return ("commonapi.ADAS_SystStatus_Service:v1_0");
}

CommonAPI::Version ADAS_SystStatus_Service::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}


} // namespace commonapi
} // namespace v1

namespace CommonAPI {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COMMONAPI_ADAS__SYST_STATUS__SERVICE_HPP_
